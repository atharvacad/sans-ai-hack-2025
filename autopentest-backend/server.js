const express = require('express');
const mongoose = require('mongoose');
const ngrok = require('@ngrok/ngrok');
const { Octokit } = require('@octokit/core');
const dotenv = require('dotenv');

dotenv.config();

const app = express();

// Middleware
app.use(express.json());

// Define your ScanResult model here
// const ScanResult = mongoose.model('ScanResult', new mongoose.Schema({ data: Object }, { timestamps: true }));

// Basic route to indicate the website is running
app.get('/', (req, res) => {
    res.send(`
        🚀 Website is running
        <button onclick="fetchScanResults()">Fetch CodeQL Scan Results</button>
        <script>
            async function fetchScanResults() {
                const response = await fetch('/fetch-scan-results');
                const data = await response.json();
                console.log('Fetched CodeQL Scan Results:', data);
                alert('Fetched CodeQL Scan Results. Check console for details.');
            }
        </script>
    `);
});

// Save Scan Results
app.post('/api/scan-results', async (req, res) => {
    try {
        const scan = new ScanResult({ data: req.body });
        await scan.save();
        res.json({ message: "✅ Scan results saved successfully" });
    } catch (err) {
        res.status(500).json({ error: "❌ Error saving scan results" });
    }
});

// Fetch Scan Results
app.get('/api/scan-results', async (req, res) => {
    const scans = await ScanResult.find().sort({ createdAt: -1 });
    res.json(scans);
});

// Initialize Octokit
const octokit = new Octokit({
    auth: process.env.GITHUB_TOKEN
});

// Route to fetch CodeQL scan results
app.get('/fetch-scan-results', async (req, res) => {
    try {
        const response = await octokit.request('GET /repos/{owner}/{repo}/code-scanning/alerts', {
            owner: process.env.GITHUB_OWNER,
            repo: process.env.GITHUB_REPO,
            headers: {
                'X-GitHub-Api-Version': '2022-11-28'
            }
        });
        console.log('Fetched CodeQL Scan Results:', response.data);
        res.json(response.data);
    } catch (err) {
        console.error("Error fetching CodeQL scan results:", err);
        res.status(500).json({ error: "Error fetching CodeQL scan results" });
    }
});

// Start Server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`🚀 Server running on port ${PORT}`);
    console.log(`🌐 Local URL: http://localhost:${PORT}`);
});

// Integrate ngrok
ngrok.connect({ addr: PORT, authtoken_from_env: true })
    .then(listener => console.log(`Ingress established at: ${listener.url()}`))
    .catch(err => console.error('Error establishing ngrok connection:', err));